from django.conf import settings
from importlib import import_module
from import_export import widgets
from geocodable.models import LocationAlias
from django import forms

class DatasetImporter(object):
    """Importing backend. Implement a subclass of this to add more importing
    backends. Must also include a Meta subclass that defines a ``resource``
    attribute, the value of which is an instantiated importing resource
    (PersonResource, EventResource, etc). Internally, Organizer uses
    django-import-export to manage creating/updating records generated by an
    importer backend."""
    def __init__(self, configuration):
        self.configuration = configuration

    def next(self):
        return self.next_page()

    def next_page(self):
        """The meat of your importer. Must return a ``tablib.Dataset`` for each
        page, and raise a StopIteration exception when out of pages."""
        raise NotImplementedError()

    def __iter__(self):
        self.init()
        return self

    def init(self):
        """Utility method to perform initial setup of the import"""
        pass

    def options_form(self, *args, **kwargs):
        return forms.Form(*args, **kwargs)

importerCache = None

def get_importer_classes():
    """Returns all discovered importers"""
    global importerCache
    if importerCache is None:
        importerCache = collect_importers()
    return importerCache

def get_importer_class(name):
    return get_importer_classes().get(name)

def collect_importers():
    """Searches installed apps for a module named 'importers'"""
    ret = {}
    for app in settings.INSTALLED_APPS:
        try:
            imported = import_module('.'.join((app, 'importing')))
        except ImportError, e:
            continue
        if hasattr(imported, 'importers'):
            ret.update(imported.importers)
    return ret
