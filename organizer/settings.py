"""
Django settings for organizer project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import raven
import dj_database_url


LOG_REQUEST_ID_HEADER = 'HTTP_X_REQUEST_ID'
LOG_REQUESTS = True

ORG_NAME = os.getenv('ORG_NAME', 'East Bay for Everyone')
ORG_SHORTNAME = os.getenv('ORG_SHORTNAME', 'EBFE')
ORG_LOGO_URL = os.getenv('ORG_LOGO_URL', None)
ORG_PRIMARY_COLOR = os.getenv('ORG_PRIMARY_COLOR', None)
ORG_SECONDARY_COLOR = os.getenv('ORG_SECONDARY_COLOR', None)

LOGGING = {
    "version": 1,
    "filters": {
        "request_id": {
            "()": "request_id.logging.RequestIdFilter"
        }
    },
    "formatters": {
        "console": {
            "format": "%(asctime)s - %(levelname)-5s [%(name)s] request_id=%(request_id)s %(message)s",
            "datefmt": "%H:%M:%S"
        },
        "rq_console": {
            "format": "%(asctime)s - %(levelname)-5s [%(name)s] %(message)s",
            "datefmt": "%H:%M:%S"
        }
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "filters": ["request_id"],
            "class": "rq.utils.ColorizingStreamHandler",
            "formatter": "console"
        },
        "rq_console": {
            "level": "DEBUG",
            "class": "rq.utils.ColorizingStreamHandler",
            "formatter": "rq_console"
        }
    },
    "root": {
        "level": os.getenv('LOG_LEVEL', 'INFO'),
        "handlers": ["console"]
    },
    "loggers": {
        "django": {
            "level": os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            "propagate": True
        },
        "rq.worker": {
            "level": os.getenv('RQ_LOG_LEVEL', 'INFO'),
            "handlers": ["rq_console"],
            "propagate": False
        },
        "raven.contrib.django.client.DjangoClient": {
            "level": 'WARN'
        },
    }
}

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', None)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ('DEBUG' in os.environ)

if 'ALLOWED_HOSTS' in os.environ:
    ALLOWED_HOSTS = os.environ['ALLOWED_HOSTS'].split(',')
else:
    ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rangefilter',
    'anymail',
    'address',
    'rest_framework',
    'markdownify',
    'webpack_loader',
    'raven.contrib.django.raven_compat',
    'social_django',
    'django_rq',
    'import_export',
    'taggit',
    'taggit_helpers',
    'taggit_serializer',
    'mptt',
    'crm',
    'onboarding',
    'events',
    'donations',
    'filtering',
    'geocodable',
    'sync',
    'notifications'
]

#Force SSL if debug is disabled
SECURE_SSL_REDIRECT = os.getenv('DEBUG', False) == False

DATETIME_INPUT_FORMATS = (
    '%Y-%m-%dT%H:%M:%S%z',
    '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'
    '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'
    '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'
    '%Y-%m-%d',              # '2006-10-25'
    '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'
    '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'
    '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'
    '%m/%d/%Y',              # '10/25/2006'
    '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'
    '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'
    '%m/%d/%y %H:%M',        # '10/25/06 14:30'
    '%m/%d/%y',              # '10/25/06'
)

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': os.getenv('REDISTOGO_URL', 'redis://localhost:6379/0')
    }
}

RQ_QUEUES = {
    'default': {
        'USE_REDIS_CACHE': 'default',
        'ASYNC': not DEBUG
    }
}

AUTOMATIC_ONBOARDING = 'AUTOMATIC_ONBOARDING' in os.environ

RQ_SHOW_ADMIN_LINK = True

MARKDOWNIFY_WHITELIST_TAGS = [
    'a', 'abbr', 'acronym', 'b', 'blockquote', 'em', 'i', 'li', 'ol', 'p',
    'string', 'ul', 'img'
]

MIDDLEWARE = [
    'request_id.middleware.RequestIdMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'organizer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates/', 'assets/bundles/'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'crm.context.add_user_data',
                'crm.context.add_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'organizer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'crm.pipeline.ensure_person_for_email',
    'organizer.pipeline.sync_from_discourse_auth',
    'organizer.pipeline.sync_backend_group',
)

db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)

SOCIAL_AUTH_URL_NAMESPACE = 'social'

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'assets')
]

WEBPACK_LOADER = {
    'DEFAULT': {
        'BUNDLE_DIR_NAME': 'bundles/',
        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json')
    }
}

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ANYMAIL = {
    'MAILGUN_API_KEY': os.environ.get('MAILGUN_API_KEY', None),
    'MAILGUN_SENDER_DOMAIN': os.environ.get('MAILGUN_DOMAIN', None),
    'WEBOOK_AUTHORIZATION': os.environ.get('ANYMAIL_WEBHOOK_AUTHORIZATION', None)
}

EMAIL_BACKEND = 'anymail.backends.mailgun.EmailBackend'
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', None)

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser',
    ],
    'PAGE_SIZE': 100
}

RAVEN_CONFIG = {
    'dsn': os.environ.get("SENTRY_DSN")
}

DEFAULT_CHARSET="utf-8"

if DEBUG:
    DEFAULT_GEOCODE_ADAPTOR = 'geocodable.api.DummyAdaptor'
else:
    DEFAULT_GEOCODE_ADAPTOR = 'geocodable.api.GoogleAdaptor'

GEOCODE_ADAPTOR = os.environ.get('GEOCODE_ADAPTOR', DEFAULT_GEOCODE_ADAPTOR)

DUMMY_GEOCODE_CENTER = [float(os.environ.get('DUMMY_GEOCODE_LAT', '0')),
float(os.environ.get('DUMMY_GEOCODE_LNG', '0'))]

MAILCHIMP_SECRET_KEY = os.environ.get('MAILCHIMP_SECRET_KEY', None)
MAILCHIMP_LIST_ID = os.environ.get('MAILCHIMP_LIST_ID', None)

GOOGLE_MAPS_KEY = os.environ.get('GOOGLE_MAPS_KEY', None)
GOOGLE_API_KEY = GOOGLE_MAPS_KEY
GOOGLE_SERVICE_ACCOUNT_CREDENTIALS = os.environ.get('GOOGLE_SERVICE_ACCOUNT_CREDENTIALS', None)

STRIPE_KEY = os.environ.get('STRIPE_KEY', None)

AIRTABLE_API_KEY = os.environ.get('AIRTABLE_API_KEY', None)

DISCOURSE_BASE_URL = os.environ.get('DISCOURSE_BASE_URL', None)
DISCOURSE_SSO_SECRET = os.environ.get('DISCOURSE_SSO_SECRET', None)
DISCOURSE_API_KEY = os.environ.get('DISCOURSE_API_KEY', None)

SOCIAL_AUTH_SLACK_KEY = os.environ.get('SLACK_KEY', None)
SOCIAL_AUTH_SLACK_SECRET = os.environ.get('SLACK_SECRET', None)
SOCIAL_AUTH_SLACK_SLACK_SCOPE = ['identity.basic','identity.team',
        'identity.email']
SOCIAL_AUTH_SLACK_TEAM = os.environ.get('SLACK_TEAM_ID', None)

SLACK_API_TOKEN = os.environ.get('SLACK_API_TOKEN', None)

AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend',)

# This also must match the condition in the LocalDevAuth class.
if DEBUG and ('USE_REALLY_INSECURE_DEVELOPMENT_AUTHENTICATION_BACKEND' in
        os.environ):
    AUTHENTICATION_BACKENDS += ('organizer.auth.LocalDevAuth',)

if DISCOURSE_SSO_SECRET is not None:
    AUTHENTICATION_BACKENDS += ('organizer.auth.DiscourseSSOAuth',)

if SOCIAL_AUTH_SLACK_KEY is not None:
    if SOCIAL_AUTH_SLACK_TEAM is None:
        raise EnvironmentError("You must set a slack team/workspace ID to enable slack logins. I will not allow this to be open to all workspaces.")
    AUTHENTICATION_BACKENDS += ('social_core.backends.slack.SlackOAuth2',)

TYPEFORM_ACCESS_TOKEN = os.environ.get('TYPEFORM_ACCESS_TOKEN', None)
