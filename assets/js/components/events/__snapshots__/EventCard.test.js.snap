// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CheckInButton should render a message when it is far in the future 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    checkedIn={false}
    classes={Object {}}
    currentLocation={
      Object {
        "geometry": Object {
          "coordinates": Array [
            -10,
            0,
          ],
          "type": "Point",
        },
        "properties": Object {},
        "type": "Feature",
      }
    }
    currentUser={
      Object {
        "email": "",
      }
    }
    event={
      Object {
        "attendees": Array [],
        "checkIn": Object {
          "canCheckIn": false,
          "hasNotStarted": true,
          "isInPast": false,
          "isNearby": false,
        },
        "end_timestamp": "2011-10-16T17:17:56.406Z",
        "geo": Object {
          "geometry": Object {
            "coordinates": Array [
              0,
              0,
            ],
            "type": "Point",
          },
          "properties": Object {},
          "type": "Feature",
        },
        "timestamp": "2011-10-16T17:02:56.406Z",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <WithStyles(Grid)
          item={true}
          style={
            Object {
              "textAlign": "center",
            }
          }
          xs={2}
        >
          <WithStyles(Badge)
            badgeContent={
              <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={false}
                flip={null}
                icon={
                  Array [
                    "fa",
                    "hourglass",
                  ]
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                symbol={false}
                transform={null}
              />
            }
            color="secondary"
          >
            <Connect(Component)
              className={undefined}
            />
          </WithStyles(Badge)>
        </WithStyles(Grid)>,
        <WithStyles(Grid)
          item={true}
          xs={true}
        >
          <p>
            This event hasn't started yet.
          </p>
        </WithStyles(Grid)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Badge)
            badgeContent={
              <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={false}
                flip={null}
                icon={
                  Array [
                    "fa",
                    "hourglass",
                  ]
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                symbol={false}
                transform={null}
              />
            }
            color="secondary"
          >
            <Connect(Component)
              className={undefined}
            />
          </WithStyles(Badge)>,
          "item": true,
          "style": Object {
            "textAlign": "center",
          },
          "xs": 2,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "badgeContent": <FontAwesomeIcon
              border={false}
              className=""
              fixedWidth={false}
              flip={null}
              icon={
                Array [
                  "fa",
                  "hourglass",
                ]
              }
              inverse={false}
              listItem={false}
              mask={null}
              pull={null}
              pulse={false}
              rotation={null}
              size={null}
              spin={false}
              symbol={false}
              transform={null}
            />,
            "children": <Connect(Component)
              className={undefined}
            />,
            "color": "secondary",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <p>
            This event hasn't started yet.
          </p>,
          "item": true,
          "xs": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "This event hasn't started yet.",
          },
          "ref": null,
          "rendered": "This event hasn't started yet.",
          "type": "p",
        },
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <WithStyles(Grid)
            item={true}
            style={
              Object {
                "textAlign": "center",
              }
            }
            xs={2}
          >
            <WithStyles(Badge)
              badgeContent={
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={false}
                  flip={null}
                  icon={
                    Array [
                      "fa",
                      "hourglass",
                    ]
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  symbol={false}
                  transform={null}
                />
              }
              color="secondary"
            >
              <Connect(Component)
                className={undefined}
              />
            </WithStyles(Badge)>
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
            xs={true}
          >
            <p>
              This event hasn't started yet.
            </p>
          </WithStyles(Grid)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Badge)
              badgeContent={
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={false}
                  flip={null}
                  icon={
                    Array [
                      "fa",
                      "hourglass",
                    ]
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  symbol={false}
                  transform={null}
                />
              }
              color="secondary"
            >
              <Connect(Component)
                className={undefined}
              />
            </WithStyles(Badge)>,
            "item": true,
            "style": Object {
              "textAlign": "center",
            },
            "xs": 2,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "badgeContent": <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={false}
                flip={null}
                icon={
                  Array [
                    "fa",
                    "hourglass",
                  ]
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                symbol={false}
                transform={null}
              />,
              "children": <Connect(Component)
                className={undefined}
              />,
              "color": "secondary",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <p>
              This event hasn't started yet.
            </p>,
            "item": true,
            "xs": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "This event hasn't started yet.",
            },
            "ref": null,
            "rendered": "This event hasn't started yet.",
            "type": "p",
          },
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`CheckInButton should render a message when it was a long time ago 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    checkedIn={false}
    classes={Object {}}
    currentLocation={
      Object {
        "geometry": Object {
          "coordinates": Array [
            -10,
            0,
          ],
          "type": "Point",
        },
        "properties": Object {},
        "type": "Feature",
      }
    }
    currentUser={
      Object {
        "email": "",
      }
    }
    event={
      Object {
        "attendees": Array [],
        "checkIn": Object {
          "canCheckIn": false,
          "hasNotStarted": false,
          "isInPast": true,
          "isNearby": false,
        },
        "end_timestamp": "2011-09-16T17:17:56.406Z",
        "geo": Object {
          "geometry": Object {
            "coordinates": Array [
              0,
              0,
            ],
            "type": "Point",
          },
          "properties": Object {},
          "type": "Feature",
        },
        "timestamp": "2011-09-16T16:17:56.406Z",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <WithStyles(Grid)
          item={true}
          style={
            Object {
              "textAlign": "center",
            }
          }
          xs={2}
        >
          <WithStyles(Badge)
            badgeContent={
              <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={false}
                flip={null}
                icon={
                  Array [
                    "fa",
                    "calendar-times",
                  ]
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                symbol={false}
                transform={null}
              />
            }
            color="error"
          >
            <Connect(Component)
              className={undefined}
            />
          </WithStyles(Badge)>
        </WithStyles(Grid)>,
        <WithStyles(Grid)
          item={true}
          xs={true}
        >
          <p>
            This event already happened. 
            0
             people checked in without you.
          </p>
        </WithStyles(Grid)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Badge)
            badgeContent={
              <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={false}
                flip={null}
                icon={
                  Array [
                    "fa",
                    "calendar-times",
                  ]
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                symbol={false}
                transform={null}
              />
            }
            color="error"
          >
            <Connect(Component)
              className={undefined}
            />
          </WithStyles(Badge)>,
          "item": true,
          "style": Object {
            "textAlign": "center",
          },
          "xs": 2,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "badgeContent": <FontAwesomeIcon
              border={false}
              className=""
              fixedWidth={false}
              flip={null}
              icon={
                Array [
                  "fa",
                  "calendar-times",
                ]
              }
              inverse={false}
              listItem={false}
              mask={null}
              pull={null}
              pulse={false}
              rotation={null}
              size={null}
              spin={false}
              symbol={false}
              transform={null}
            />,
            "children": <Connect(Component)
              className={undefined}
            />,
            "color": "error",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <p>
            This event already happened. 
            0
             people checked in without you.
          </p>,
          "item": true,
          "xs": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "This event already happened. ",
              0,
              " people checked in without you.",
            ],
          },
          "ref": null,
          "rendered": Array [
            "This event already happened. ",
            0,
            " people checked in without you.",
          ],
          "type": "p",
        },
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <WithStyles(Grid)
            item={true}
            style={
              Object {
                "textAlign": "center",
              }
            }
            xs={2}
          >
            <WithStyles(Badge)
              badgeContent={
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={false}
                  flip={null}
                  icon={
                    Array [
                      "fa",
                      "calendar-times",
                    ]
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  symbol={false}
                  transform={null}
                />
              }
              color="error"
            >
              <Connect(Component)
                className={undefined}
              />
            </WithStyles(Badge)>
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
            xs={true}
          >
            <p>
              This event already happened. 
              0
               people checked in without you.
            </p>
          </WithStyles(Grid)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Badge)
              badgeContent={
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={false}
                  flip={null}
                  icon={
                    Array [
                      "fa",
                      "calendar-times",
                    ]
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  symbol={false}
                  transform={null}
                />
              }
              color="error"
            >
              <Connect(Component)
                className={undefined}
              />
            </WithStyles(Badge)>,
            "item": true,
            "style": Object {
              "textAlign": "center",
            },
            "xs": 2,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "badgeContent": <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={false}
                flip={null}
                icon={
                  Array [
                    "fa",
                    "calendar-times",
                  ]
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                symbol={false}
                transform={null}
              />,
              "children": <Connect(Component)
                className={undefined}
              />,
              "color": "error",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <p>
              This event already happened. 
              0
               people checked in without you.
            </p>,
            "item": true,
            "xs": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "This event already happened. ",
                0,
                " people checked in without you.",
              ],
            },
            "ref": null,
            "rendered": Array [
              "This event already happened. ",
              0,
              " people checked in without you.",
            ],
            "type": "p",
          },
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`locationDisplay with current location should render a location description 1`] = `"LOCATION - Far away: 69 miles North"`;

exports[`locationDisplay with current location should render a location description without event location 1`] = `"Far away: 69 miles North"`;

exports[`locationDisplay without current location should render a location description 1`] = `"LOCATION"`;

exports[`locationDisplay without current location should render a location description without event location 1`] = `"Far away: 69 miles North"`;
